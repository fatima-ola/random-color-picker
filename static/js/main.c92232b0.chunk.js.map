{"version":3,"sources":["components/Button.js","serviceWorker.js","index.js"],"names":["Button","onClick","this","props","className","light","React","Component","Boolean","window","location","hostname","match","Random","state","color","handleClick","bind","applyColor","prevProps","prevState","ary","join","reduce","a","b","formatColor","document","body","style","background","random","i","push","Math","floor","setState","chooseColor","isLight","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAEaA,G,MAAb,uKAEE,OACC,4BAAQC,QAASC,KAAKC,MAAMF,QAC3BG,UAAYF,KAAKC,MAAME,MAAQ,eAAiB,eADjD,eAHH,GAA4BC,IAAMC,YCUdC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICXAC,E,kDACJ,WAAYV,GAAO,IAAD,8BAChB,cAAMA,IACDW,MAAQ,CAACC,MAAO,CAAC,GAAI,IAAK,MAC/B,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAHH,E,gEAMhBf,KAAKgB,e,yCAGYC,EAAWC,GAC5BlB,KAAKgB,e,kCAGKG,GACV,MAAO,OAASA,EAAIC,KAAK,MAAQ,M,gCAKjC,OADYpB,KAAKY,MAAMC,MACZQ,QAAO,SAACC,EAAEC,GAAH,OAASD,EAAEC,KAAK,M,mCAIlC,IAAMV,EAAQb,KAAKwB,YAAYxB,KAAKY,MAAMC,OAC1CY,SAASC,KAAKC,MAAMC,WAAaf,I,oCAKjC,IADA,IAAMgB,EAAS,GACNC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAOE,KAAKC,KAAKC,MAAoB,IAAdD,KAAKH,WAE9B,OAAOA,I,oCAIP7B,KAAKkC,SAAS,CACZrB,MAAOb,KAAKmC,kB,+BAKd,OACE,6BACE,wBAAIjC,UAAWF,KAAKoC,UAAY,QAAU,SAA1C,iBACepC,KAAKwB,YAAYxB,KAAKY,MAAMC,QAE3C,kBAAC,EAAD,CACAV,MAAOH,KAAKoC,UACZrC,QAASC,KAAKc,mB,GAlDDV,IAAMC,WAyD3BgC,IAASC,OACP,kBAAC,EAAD,MACAb,SAASc,eAAe,SDiEpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c92232b0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport class Button extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<button onClick={this.props.onClick}\r\n\t\t\t\tclassName={ this.props.light ? 'light-button' : 'dark-button' }>\r\n\t\t\t\tRefresh\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Button } from './components/Button';\nimport * as serviceWorker from './serviceWorker';\n\n\nclass Random extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {color: [21, 134, 125]};\n    this.handleClick = this.handleClick.bind(this);\n  }\n  componentDidMount() {\n    this.applyColor();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.applyColor();\n  }\n\n  formatColor(ary) {\n    return 'rgb(' + ary.join(', ') + ')';\n  }\n\n  isLight() {\n    const rgb = this.state.color;\n    return rgb.reduce((a,b) => a+b) < 127 * 3;\n  }\n\n  applyColor() {\n    const color = this.formatColor(this.state.color);\n    document.body.style.background = color;\n  }\n\n  chooseColor() {\n    const random = [];\n    for (let i = 0; i < 3; i++) {\n      random.push(Math.floor(Math.random()*256));\n    }\n    return random;\n  }\n\n  handleClick() {\n    this.setState({\n      color: this.chooseColor()\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className={this.isLight() ? 'white' : 'black'}>\n        Your color is {this.formatColor(this.state.color)} \n        </h1>\n        <Button \n        light={this.isLight()} \n        onClick={this.handleClick}/>\n      </div>\n    );\n  }\n}\n\n\nReactDOM.render(\n  <Random />, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}